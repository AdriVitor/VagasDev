// <auto-generated />
using System;
using DEVVagas.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DEVVagas.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220929173631_CreateDb")]
    partial class CreateDb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CandidateVacancy", b =>
                {
                    b.Property<int>("CandidatesId")
                        .HasColumnType("int");

                    b.Property<int>("VacanciesId")
                        .HasColumnType("int");

                    b.HasKey("CandidatesId", "VacanciesId");

                    b.HasIndex("VacanciesId");

                    b.ToTable("CandidateVacancy");
                });

            modelBuilder.Entity("DEVVagas.Models.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CNPJ")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ProfileEnterprise")
                        .HasColumnType("int");

                    b.Property<string>("SocialReason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypeUser")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CompanyModels");
                });

            modelBuilder.Entity("DEVVagas.Models.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("LinkedIn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number2")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ContactModels");
                });

            modelBuilder.Entity("DEVVagas.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("PersonModels");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Person");
                });

            modelBuilder.Entity("DEVVagas.Models.Technologies", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("ADONET")
                        .HasColumnType("bit");

                    b.Property<bool>("ASPNET")
                        .HasColumnType("bit");

                    b.Property<bool>("ASPNETCore")
                        .HasColumnType("bit");

                    b.Property<bool>("AWS")
                        .HasColumnType("bit");

                    b.Property<bool>("AdonisJs")
                        .HasColumnType("bit");

                    b.Property<bool>("Angular")
                        .HasColumnType("bit");

                    b.Property<bool>("Azure")
                        .HasColumnType("bit");

                    b.Property<bool>("Bootstrap")
                        .HasColumnType("bit");

                    b.Property<bool>("C")
                        .HasColumnType("bit");

                    b.Property<bool>("CMaisMais")
                        .HasColumnType("bit");

                    b.Property<bool>("CSharp")
                        .HasColumnType("bit");

                    b.Property<bool>("CakePHP")
                        .HasColumnType("bit");

                    b.Property<int?>("CandidateId")
                        .HasColumnType("int");

                    b.Property<bool>("CloudStigma")
                        .HasColumnType("bit");

                    b.Property<bool>("CodeIgniter")
                        .HasColumnType("bit");

                    b.Property<bool>("DOTNETCore")
                        .HasColumnType("bit");

                    b.Property<bool>("DOTNETFramework")
                        .HasColumnType("bit");

                    b.Property<bool>("Dapper")
                        .HasColumnType("bit");

                    b.Property<bool>("Dart")
                        .HasColumnType("bit");

                    b.Property<bool>("Django")
                        .HasColumnType("bit");

                    b.Property<bool>("Emberjs")
                        .HasColumnType("bit");

                    b.Property<bool>("EntityFramework")
                        .HasColumnType("bit");

                    b.Property<bool>("Express")
                        .HasColumnType("bit");

                    b.Property<bool>("Go")
                        .HasColumnType("bit");

                    b.Property<bool>("GoogleCloud")
                        .HasColumnType("bit");

                    b.Property<bool>("IBMCloud")
                        .HasColumnType("bit");

                    b.Property<bool>("Java")
                        .HasColumnType("bit");

                    b.Property<bool>("JavaScript")
                        .HasColumnType("bit");

                    b.Property<bool>("Kotlin")
                        .HasColumnType("bit");

                    b.Property<bool>("Laravel")
                        .HasColumnType("bit");

                    b.Property<bool>("MongoDB")
                        .HasColumnType("bit");

                    b.Property<bool>("MySql")
                        .HasColumnType("bit");

                    b.Property<bool>("NoSQL")
                        .HasColumnType("bit");

                    b.Property<bool>("NodeJs")
                        .HasColumnType("bit");

                    b.Property<bool>("ObjectiveC")
                        .HasColumnType("bit");

                    b.Property<bool>("Oracle")
                        .HasColumnType("bit");

                    b.Property<bool>("OracleCloud")
                        .HasColumnType("bit");

                    b.Property<bool>("Outros")
                        .HasColumnType("bit");

                    b.Property<bool>("PHP")
                        .HasColumnType("bit");

                    b.Property<bool>("PostgreSQL")
                        .HasColumnType("bit");

                    b.Property<bool>("PowerShell")
                        .HasColumnType("bit");

                    b.Property<bool>("Python")
                        .HasColumnType("bit");

                    b.Property<bool>("R")
                        .HasColumnType("bit");

                    b.Property<bool>("React")
                        .HasColumnType("bit");

                    b.Property<bool>("Ruby")
                        .HasColumnType("bit");

                    b.Property<bool>("RubyOnRails")
                        .HasColumnType("bit");

                    b.Property<bool>("Rust")
                        .HasColumnType("bit");

                    b.Property<bool>("SQLServer")
                        .HasColumnType("bit");

                    b.Property<bool>("Scala")
                        .HasColumnType("bit");

                    b.Property<bool>("Shell")
                        .HasColumnType("bit");

                    b.Property<bool>("Spring")
                        .HasColumnType("bit");

                    b.Property<bool>("Swift")
                        .HasColumnType("bit");

                    b.Property<bool>("Symfony")
                        .HasColumnType("bit");

                    b.Property<bool>("TypeScript")
                        .HasColumnType("bit");

                    b.Property<bool>("UiKit")
                        .HasColumnType("bit");

                    b.Property<int?>("VacancyId")
                        .HasColumnType("int");

                    b.Property<bool>("Vue")
                        .HasColumnType("bit");

                    b.Property<bool>("Vuetify")
                        .HasColumnType("bit");

                    b.Property<bool>("Xamarim")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.HasIndex("VacancyId");

                    b.ToTable("TechnologiesModels");
                });

            modelBuilder.Entity("DEVVagas.Models.Vacancy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(8000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdCompany")
                        .HasColumnType("int");

                    b.Property<int>("IdRecruiter")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("Presential")
                        .HasColumnType("bit");

                    b.Property<int?>("RecruiterId")
                        .HasColumnType("int");

                    b.Property<bool>("Remote")
                        .HasColumnType("bit");

                    b.Property<int>("Seniority")
                        .HasColumnType("int");

                    b.Property<int>("TypeContracts")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("RecruiterId");

                    b.ToTable("VacancyModels");
                });

            modelBuilder.Entity("DEVVagas.Models.Candidate", b =>
                {
                    b.HasBaseType("DEVVagas.Models.Person");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ContactId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GitHubOrGitlabOrPortfolio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Seniority")
                        .HasColumnType("int");

                    b.Property<int>("TypeUser")
                        .HasColumnType("int");

                    b.HasIndex("ContactId");

                    b.HasDiscriminator().HasValue("Candidate");
                });

            modelBuilder.Entity("DEVVagas.Models.Recruiter", b =>
                {
                    b.HasBaseType("DEVVagas.Models.Person");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("ContactId")
                        .HasColumnType("int")
                        .HasColumnName("Recruiter_ContactId");

                    b.Property<int>("TypeUser")
                        .HasColumnType("int")
                        .HasColumnName("Recruiter_TypeUser");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ContactId");

                    b.HasDiscriminator().HasValue("Recruiter");
                });

            modelBuilder.Entity("CandidateVacancy", b =>
                {
                    b.HasOne("DEVVagas.Models.Candidate", null)
                        .WithMany()
                        .HasForeignKey("CandidatesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DEVVagas.Models.Vacancy", null)
                        .WithMany()
                        .HasForeignKey("VacanciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DEVVagas.Models.Technologies", b =>
                {
                    b.HasOne("DEVVagas.Models.Candidate", null)
                        .WithMany("Technologies")
                        .HasForeignKey("CandidateId");

                    b.HasOne("DEVVagas.Models.Vacancy", null)
                        .WithMany("Technologies")
                        .HasForeignKey("VacancyId");
                });

            modelBuilder.Entity("DEVVagas.Models.Vacancy", b =>
                {
                    b.HasOne("DEVVagas.Models.Company", null)
                        .WithMany("Vacancies")
                        .HasForeignKey("CompanyId");

                    b.HasOne("DEVVagas.Models.Recruiter", null)
                        .WithMany("Vacancies")
                        .HasForeignKey("RecruiterId");
                });

            modelBuilder.Entity("DEVVagas.Models.Candidate", b =>
                {
                    b.HasOne("DEVVagas.Models.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId");

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("DEVVagas.Models.Recruiter", b =>
                {
                    b.HasOne("DEVVagas.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DEVVagas.Models.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("DEVVagas.Models.Company", b =>
                {
                    b.Navigation("Vacancies");
                });

            modelBuilder.Entity("DEVVagas.Models.Vacancy", b =>
                {
                    b.Navigation("Technologies");
                });

            modelBuilder.Entity("DEVVagas.Models.Candidate", b =>
                {
                    b.Navigation("Technologies");
                });

            modelBuilder.Entity("DEVVagas.Models.Recruiter", b =>
                {
                    b.Navigation("Vacancies");
                });
#pragma warning restore 612, 618
        }
    }
}
